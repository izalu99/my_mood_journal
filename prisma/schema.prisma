// Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clerkId String @unique @map("clerk_id")
  email   String @unique @map("email")

  entries JournalEntry[]
  analysis Analysis[]
}

model JournalEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  content String @map("content")

  analysis Analysis?

  @@unique([userId, id]) //compound id which means that the combination of userId and id must be unique
}

model Analysis {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entryId String       @map("entry_id") @db.ObjectId
  entry   JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mood           String  @map("mood")
  summary        String  @map("summary")
  color          String  @map("color")
  negative       Boolean @map("negative")
  subject        String  @map("subject")
  sentimentScore Float   @default(0) @map("sentiment_score")

  @@unique([entryId])
  @@index([userId])
}
